// Copyright (c) Krosmoz 2025.
// Krosmoz licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Krosmoz/blob/main/LICENSE.

using System.Collections.Immutable;
using Krosmoz.SourceGenerators.Infrastructure;
using Krosmoz.SourceGenerators.MessageDispatcher.Models;
using Microsoft.CodeAnalysis;

namespace Krosmoz.SourceGenerators.MessageDispatcher;

public sealed partial class MessageDispatcherSourceGenerator
{
    /// <summary>
    /// Generates the source code for the message dispatcher and service collection extensions.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">The collection of message handlers.</param>
    /// <param name="assemblyName">The name of the assembly being processed.</param>
    private static void Generate(SourceProductionContext context, ImmutableArray<MessageHandler> handlers, string assemblyName)
    {
        if (handlers.IsEmpty)
            return;

        var suffix = assemblyName.Split('.').Last();

        GenerateMessageDispatcher(context, handlers, suffix);
        GenerateServiceCollectionExtensions(context, handlers, suffix);
    }

    /// <summary>
    /// Generates the source code for the message dispatcher class.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">The collection of message handlers.</param>
    /// <param name="suffix">The suffix derived from the assembly name.</param>
    private static void GenerateMessageDispatcher(SourceProductionContext context, ImmutableArray<MessageHandler> handlers, string suffix)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("#nullable enable")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Network.Metadata;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.MessageDispatcher\", \"1.0.0\")]")
            .AppendLine("internal sealed class MessageDispatcher : global::Krosmoz.Core.Network.Metadata.IMessageDispatcher<global::Krosmoz.Servers.{0}.Network.Transport.DofusConnection>", suffix);

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("private readonly global::Microsoft.Extensions.DependencyInjection.AsyncServiceScope _scope;")
                .AppendLine();

            foreach (var handler in handlers)
                builder.AppendIndentedLine("private {0}? _{1};", handler.Name, handler.VariableName);

            builder
                .AppendLine()
                .AppendIndentedLine("public MessageDispatcher(global::Microsoft.Extensions.DependencyInjection.IServiceScopeFactory serviceScopeFactory)");

            using (builder.CreateScope())
                builder.AppendIndentedLine("_scope = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.CreateAsyncScope(serviceScopeFactory);");

            builder
                .AppendLine()
                .AppendIndentedLine("public global::System.Threading.Tasks.Task DispatchMessageAsync(global::Krosmoz.Servers.{0}.Network.Transport.DofusConnection connection, global::Krosmoz.Core.Network.Metadata.DofusMessage message)", suffix);

            using (builder.CreateScope())
            {
                builder.AppendIndentedLine("switch (message.ProtocolId)");
                using (builder.CreateScope())
                {
                    foreach (var handler in handlers)
                    {
                        foreach (var method in handler.Methods)
                        {
                            builder
                                .AppendIndentedLine("case {0}.StaticProtocolId:", method.MessageTypeName)
                                .Indent()
                                .AppendIndentedLine("_{0} ??= global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{1}>(_scope.ServiceProvider);", handler.VariableName, handler.Name)
                                .AppendIndentedLine("return _{0}.{1}(connection, ({2})message);", handler.VariableName, method.Name, method.MessageTypeName)
                                .Unindent();
                        }
                    }
                }

                builder
                    .AppendLine()
                    .AppendIndentedLine("return DefaultDispatchAsync(connection);");
            }

            builder
                .AppendLine()
                .AppendIndentedLine("private global::System.Threading.Tasks.Task DefaultDispatchAsync(global::Krosmoz.Servers.{0}.Network.Transport.DofusConnection connection)", suffix);

            using (builder.CreateScope())
                builder.AppendIndentedLine("return connection.SendAsync<global::Krosmoz.Protocol.Messages.Game.Basic.BasicNoOperationMessage>().AsTask();");

            builder
                .AppendLine()
                .AppendIndentedLine("public ValueTask DisposeAsync()");

            using (builder.CreateScope())
                builder.AppendIndentedLine("return _scope.DisposeAsync();");
        }

        context.AddSource("MessageDispatcher.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates the source code for the service collection extensions.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">The collection of message handlers.</param>
    /// <param name="suffix">The suffix derived from the assembly name.</param>
    private static void GenerateServiceCollectionExtensions(SourceProductionContext context, ImmutableArray<MessageHandler> handlers, string suffix)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Network.Protocol.Dofus;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.MessageDispatcher\", \"1.0.0\")]")
            .AppendLine("internal static class ServiceCollectionExtensions");

        using (builder.CreateScope())
        {
            builder.AppendIndentedLine("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddDofusProtocol(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)");

            using (builder.CreateScope())
            {
                builder
                    .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Krosmoz.Core.Network.Metadata.IMessageFactory, global::Krosmoz.Protocol.Messages.MessageFactory>(services);")
                    .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddTransient<global::Krosmoz.Core.Network.Metadata.IMessageDispatcher<global::Krosmoz.Servers.{0}.Network.Transport.DofusConnection>, global::Krosmoz.Core.Network.Metadata.MessageDispatcher>(services);", suffix);

                foreach (var handler in handlers)
                    builder.AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<{0}>(services);", handler.Name);

                builder.AppendIndentedLine("return services;");
            }
        }

        context.AddSource("ServiceCollectionExtensions.g.cs", builder.ToSourceText());
    }
}
