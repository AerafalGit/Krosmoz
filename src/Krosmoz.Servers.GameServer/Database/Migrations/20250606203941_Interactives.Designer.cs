// <auto-generated />
using Krosmoz.Servers.GameServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Krosmoz.Servers.GameServer.Database.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250606203941_Interactives")]
    partial class Interactives
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:CollationDefinition:case_insensitive", "en-u-ks-primary,en-u-ks-primary,icu,False")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Experiences.ExperienceRecord", b =>
                {
                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<long?>("AlignmentHonor")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterXp")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildXp")
                        .HasColumnType("bigint");

                    b.Property<long?>("JobXp")
                        .HasColumnType("bigint");

                    b.Property<long?>("MountXp")
                        .HasColumnType("bigint");

                    b.HasKey("Level");

                    b.ToTable("experiences", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveActionRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Criterion")
                        .HasColumnType("text");

                    b.Property<int>("InteractiveId")
                        .HasColumnType("integer");

                    b.Property<int>("InteractiveTemplateId")
                        .HasColumnType("integer");

                    b.Property<long?>("NameId")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string[]>("Parameters")
                        .HasColumnType("text[]");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InteractiveId");

                    b.ToTable("interactives_actions", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer");

                    b.Property<int>("GfxId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("MapsData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("interactives", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveActionRecord", b =>
                {
                    b.HasOne("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveRecord", null)
                        .WithMany("InteractiveActions")
                        .HasForeignKey("InteractiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveRecord", b =>
                {
                    b.Navigation("InteractiveActions");
                });
#pragma warning restore 612, 618
        }
    }
}
