// Copyright (c) Krosmoz 2025.
// Krosmoz licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Krosmoz/blob/main/LICENSE.

using System.Collections.Immutable;
using Krosmoz.SourceGenerators.Infrastructure;
using Krosmoz.SourceGenerators.Infrastructure.Extensions;
using Krosmoz.SourceGenerators.Initialization.Models;
using Microsoft.CodeAnalysis;

namespace Krosmoz.SourceGenerators.Initialization;

public sealed partial class InitializationSourceGenerator
{
    /// <summary>
    /// Generates source code for initialization services, including hosted services and service collection extensions.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="services">A collection of services to be initialized.</param>
    private static void Generate(SourceProductionContext context, ImmutableArray<InitializableService> services)
    {
        GenerateHostedService(context, services);
        GenerateServiceCollectionExtensions(context, services);
    }

    /// <summary>
    /// Generates the source code for a hosted service that initializes the provided services.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="services">A collection of services to be initialized by the hosted service.</param>
    private static void GenerateHostedService(SourceProductionContext context, ImmutableArray<InitializableService> services)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Services;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.Initialization\", \"1.0.0\")]")
            .AppendLine("internal sealed class InitializationHostedService : global::Microsoft.Extensions.Hosting.IHostedService");

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("private readonly global::System.IServiceProvider _services;")
                .AppendLine()
                .AppendIndentedLine("public InitializationHostedService(IServiceProvider services)");

            using (builder.CreateScope())
                builder.AppendIndentedLine("_services = services;");

            builder
                .AppendLine()
                .AppendIndentedLine("public global::System.Threading.Tasks.Task StartAsync(CancellationToken cancellationToken)");

            using (builder.CreateScope())
            {
                builder
                    .AppendIndentedLine("var tasks = new global::System.Func<System.Threading.CancellationToken, global::System.Threading.Tasks.Task>[]")
                    .AppendIndentedLine('{')
                    .Indent();

                foreach (var (index, service) in services.Index())
                {
                    var comma = index == services.Length - 1 ? string.Empty : ",";

                    builder.AppendIndentedLine(
                        service.IsAsync
                            ? "(ct) => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{0}>(_services).InitializeAsync(ct){1}"
                            : "(ct) => global::System.Threading.Tasks.Task.Run(() => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{0}>(_services).Initialize(), ct){1}",
                        service.Name, comma);
                }

                builder
                    .Unindent()
                    .AppendIndentedLine("};")
                    .AppendLine()
                    .AppendIndentedLine("return global::System.Threading.Tasks.Task.WhenAll(tasks.Select(t => t(cancellationToken)));");
            }

            builder
                .AppendLine()
                .AppendIndentedLine("public global::System.Threading.Tasks.Task StopAsync(CancellationToken cancellationToken)");

            using (builder.CreateScope())
                builder.AppendIndentedLine("return global::System.Threading.Tasks.Task.CompletedTask;");
        }

        context.AddSource("InitializationHostedService.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates the source code for service collection extensions to register initialization services.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="services">A collection of services to be registered.</param>
    private static void GenerateServiceCollectionExtensions(SourceProductionContext context, ImmutableArray<InitializableService> services)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Services;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.Initialization\", \"1.0.0\")]")
            .AppendLine("internal static class ServiceCollectionExtensions");

        using (builder.CreateScope())
        {
            builder.AppendIndentedLine("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddInitializableServices(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)");

            using (builder.CreateScope())
            {
                foreach (var (name, _) in services)
                {
                    var iServiceName = name.Insert(name.LastIndexOf(".", StringComparison.OrdinalIgnoreCase) + 1, "I");

                    builder
                        .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<{0}>(services);", name)
                        .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<{0}>(services, static provider => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{1}>(provider));", iServiceName, name);
                }

                builder
                    .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Microsoft.Extensions.Hosting.IHostedService, global::Krosmoz.Core.Services.InitializationHostedService>(services);")
                    .AppendIndentedLine("return services;");
            }
        }

        context.AddSource("ServiceCollectionExtensions.g.cs", builder.ToSourceText());
    }
}
