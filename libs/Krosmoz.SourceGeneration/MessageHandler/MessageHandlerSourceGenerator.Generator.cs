// Copyright (c) Krosmoz 2025.
// Krosmoz licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Krosmoz/blob/main/LICENSE.

using System.Collections.Immutable;
using Krosmoz.SourceGeneration.Infrastructure;
using Krosmoz.SourceGeneration.Infrastructure.Extensions;
using Krosmoz.SourceGeneration.MessageHandler.Models;
using Microsoft.CodeAnalysis;

namespace Krosmoz.SourceGeneration.MessageHandler;

public sealed partial class MessageHandlerSourceGenerator
{
    /// <summary>
    /// Generates source code for message handlers and service collection extensions.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">An immutable array of handlers containing metadata about message handlers.</param>
    private static void Generate(SourceProductionContext context, ImmutableArray<Handler> handlers)
    {
        if (handlers.IsEmpty)
            return;

        GenerateMessageHandler(context, handlers);
        GenerateServiceCollectionExtensions(context, handlers);
    }

    /// <summary>
    /// Generates the source code for the `MessageDispatcher` class, which dispatches messages to their respective handlers.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">An immutable array of handlers containing metadata about message handlers.</param>
    private static void GenerateMessageHandler(SourceProductionContext context, ImmutableArray<Handler> handlers)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Network.Dispatcher;")
            .AppendLine()
            .AppendLine("/// <inheritdoc />")
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGeneration.MessageHandler\", \"1.0.0\")]")
            .AppendLine("internal sealed class MessageDispatcher : global::Krosmoz.Core.Network.Dispatcher.IMessageDispatcher");

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("private readonly global::System.IServiceProvider _services;")
                .AppendLine()
                .AppendIndentedLine("/// <summary>")
                .AppendIndentedLine("/// Initializes a new instance of the <see cref=\"MessageDispatcher\"/> class.")
                .AppendIndentedLine("/// </summary>")
                .AppendIndentedLine("/// <param name=\"services\">The <see cref=\"IServiceProvider\"/> to use for resolving message handlers.</param>")
                .AppendIndentedLine("public MessageDispatcher(global::System.IServiceProvider services)");

            using (builder.CreateScope())
                builder.AppendIndentedLine("_services = services;");

            builder
                .AppendLine()
                .AppendIndentedLine("/// <inheritdoc />")
                .AppendIndentedLine("public global::System.Threading.Tasks.Task DispatchMessageAsync(global::Krosmoz.Core.Network.Transport.TcpSession session, global::Krosmoz.Core.Network.Metadata.DofusMessage message)");

            using (builder.CreateScope())
            {
                builder
                    .AppendIndentedLine("return message.ProtocolId switch")
                    .AppendIndentedLine('{')
                    .Indent();

                foreach (var handler in handlers)
                {
                    builder.AppendIndentedLine(
                        "{0}.StaticProtocolId => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{1}>(_services).{2}(({3})session, ({0})message),",
                        handler.MessageTypeName,
                        handler.ContainingTypeName,
                        handler.MethodName,
                        handler.SessionTypeName);
                }

                builder
                    .AppendIndentedLine("_ => session.SendAsync<global::Krosmoz.Protocol.Messages.Game.Basic.BasicNoOperationMessage>().AsTask()")
                    .Unindent()
                    .AppendIndentedLine("};");
            }
        }

        context.AddSource("MessageDispatcher.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates the source code for service collection extensions to register message handlers.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="handlers">An immutable array of handlers containing metadata about message handlers.</param>
    private static void GenerateServiceCollectionExtensions(SourceProductionContext context, ImmutableArray<Handler> handlers)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Core.Network.Dispatcher;")
            .AppendLine()
            .AppendLine("/// <summary>")
            .AppendLine("/// Provides extension methods for registering message handlers in the dependency injection container.")
            .AppendLine("/// </summary>")
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGeneration.MessageHandler\", \"1.0.0\")]")
            .AppendLine("internal static class MessageHandlerServiceCollectionExtensions");

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("/// <summary>")
                .AppendIndentedLine("/// Adds message handlers to the specified <see cref=\"global::Microsoft.Extensions.DependencyInjection.IServiceCollection\"/>.")
                .AppendIndentedLine("/// </summary>")
                .AppendIndentedLine("/// <param name=\"services\">The <see cref=\"global::Microsoft.Extensions.DependencyInjection.IServiceCollection\"/> to which the message handlers will be added.</param>")
                .AppendIndentedLine("/// <returns>The updated <see cref=\"global::Microsoft.Extensions.DependencyInjection.IServiceCollection\"/> with the registered message handlers.</returns>")
                .AppendIndentedLine("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddMessageHandlers(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)");

            using (builder.CreateScope())
            {
                builder.AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Krosmoz.Core.Network.Dispatcher.IMessageDispatcher, global::Krosmoz.Core.Network.Dispatcher.MessageDispatcher>(services);");

                foreach (var handler in handlers.DistinctBy(static x => x.ContainingTypeName))
                    builder.AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<{0}>(services);", handler.ContainingTypeName);

                builder.AppendIndentedLine("return services;");
            }
        }

        context.AddSource("MessageHandlerServiceCollectionExtensions.g.cs", builder.ToSourceText());
    }
}
