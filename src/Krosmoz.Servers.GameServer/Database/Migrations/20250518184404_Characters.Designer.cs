// <auto-generated />
using System;
using Krosmoz.Servers.GameServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Krosmoz.Servers.GameServer.Database.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20250518184404_Characters")]
    partial class Characters
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Characters.CharacterRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<int>("Breed")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short>("DeathCount")
                        .HasColumnType("smallint");

                    b.Property<byte>("DeathMaxLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("DeathState")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.PrimitiveCollection<int[]>("Emotes")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int>("Head")
                        .HasColumnType("integer");

                    b.Property<long>("Kamas")
                        .HasColumnType("bigint");

                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<string>("Look")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Position")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Sex")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<int[]>("Spells")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("characters", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Experiences.ExperienceRecord", b =>
                {
                    b.Property<byte>("Level")
                        .HasColumnType("smallint");

                    b.Property<long?>("AlignmentHonor")
                        .HasColumnType("bigint");

                    b.Property<long>("CharacterXp")
                        .HasColumnType("bigint");

                    b.Property<long>("GuildXp")
                        .HasColumnType("bigint");

                    b.Property<long?>("JobXp")
                        .HasColumnType("bigint");

                    b.Property<long?>("MountXp")
                        .HasColumnType("bigint");

                    b.HasKey("Level");

                    b.ToTable("experiences", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Interactives.InteractiveRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<bool>("Animated")
                        .HasColumnType("boolean");

                    b.Property<int>("ElementId")
                        .HasColumnType("integer");

                    b.Property<int>("GfxId")
                        .HasColumnType("integer");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("MapsData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.ToTable("interactives", (string)null);
                });

            modelBuilder.Entity("Krosmoz.Servers.GameServer.Database.Models.Maps.MapRecord", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<short[]>("BlueCells")
                        .IsRequired()
                        .HasColumnType("smallint[]");

                    b.Property<short?>("BottomCellId")
                        .HasColumnType("smallint");

                    b.Property<int>("BottomNeighborId")
                        .HasColumnType("integer");

                    b.Property<int>("Capabilities")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Cells")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<bool>("HasPriorityOnWorldMap")
                        .HasColumnType("boolean");

                    b.Property<short?>("LeftCellId")
                        .HasColumnType("smallint");

                    b.Property<int>("LeftNeighborId")
                        .HasColumnType("integer");

                    b.Property<int>("MerchantsMax")
                        .HasColumnType("integer");

                    b.Property<bool>("Outdoor")
                        .HasColumnType("boolean");

                    b.Property<bool>("PlacementGenDisabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("PrismAllowed")
                        .HasColumnType("boolean");

                    b.Property<bool>("PvpDisabled")
                        .HasColumnType("boolean");

                    b.PrimitiveCollection<short[]>("RedCells")
                        .IsRequired()
                        .HasColumnType("smallint[]");

                    b.Property<short?>("RightCellId")
                        .HasColumnType("smallint");

                    b.Property<int>("RightNeighborId")
                        .HasColumnType("integer");

                    b.Property<bool>("SpawnDisabled")
                        .HasColumnType("boolean");

                    b.Property<int>("SubAreaId")
                        .HasColumnType("integer");

                    b.Property<short?>("TopCellId")
                        .HasColumnType("smallint");

                    b.Property<int>("TopNeighborId")
                        .HasColumnType("integer");

                    b.Property<int>("WorldMap")
                        .HasColumnType("integer");

                    b.Property<int>("X")
                        .HasColumnType("integer");

                    b.Property<int>("Y")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("maps", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
