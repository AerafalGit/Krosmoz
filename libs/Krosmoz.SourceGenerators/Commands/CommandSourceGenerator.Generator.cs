// Copyright (c) Krosmoz 2025.
// Krosmoz licenses this file to you under the MIT license.
// See the license here https://github.com/AerafalGit/Krosmoz/blob/main/LICENSE.

using System.Collections.Immutable;
using Krosmoz.SourceGenerators.Commands.Models;
using Krosmoz.SourceGenerators.Infrastructure;
using Krosmoz.SourceGenerators.Infrastructure.Extensions;
using Microsoft.CodeAnalysis;

namespace Krosmoz.SourceGenerators.Commands;

public sealed partial class CommandSourceGenerator
{
    /// <summary>
    /// Generates the source code for command services based on the provided command groups.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="commandGroups">The collection of command groups to generate code for.</param>
    private static void Generate(SourceProductionContext context, ImmutableArray<CommandGroup> commandGroups)
    {
        if (commandGroups.IsEmpty)
            return;

        GenerateCommandService(context, commandGroups);
        GenerateServiceCollectionExtensions(context, commandGroups);
    }

    /// <summary>
    /// Generates the implementation of the CommandService class based on the provided command groups.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="commandGroups">The collection of command groups to generate code for.</param>
    private static void GenerateCommandService(SourceProductionContext context, ImmutableArray<CommandGroup> commandGroups)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Servers.GameServer.Services.Commands;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.Commands\", \"1.0.0\")]")
            .AppendLine("public sealed partial class CommandService");

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("private static readonly global::System.Collections.Concurrent.ConcurrentBag<global::Krosmoz.Servers.GameServer.Models.Commands.CommandGroup> s_commandGroups = new()")
                .AppendIndentedLine('{')
                .Indent();

            foreach (var commandGroup in commandGroups)
            {
                builder.AppendIndentedLine("new global::Krosmoz.Servers.GameServer.Models.Commands.CommandGroup")
                    .AppendIndentedLine("{")
                    .Indent()
                    .AppendIndentedLine($"Name = \"{commandGroup.Name}\",")
                    .AppendIndentedLine("Commands =")
                    .AppendIndentedLine('[')
                    .Indent();

                foreach (var command in commandGroup.Commands)
                    builder.AppendIndentedLine("new global::Krosmoz.Servers.GameServer.Models.Commands.Command")
                        .AppendIndentedLine("{")
                        .Indent()
                        .AppendIndentedLine($"Name = \"{command.Name}\",")
                        .AppendIndentedLine($"Description = \"{command.Description}\",")
                        .AppendIndentedLine($"Help = \"{command.Help}\"")
                        .Unindent()
                        .AppendIndentedLine("},");

                builder
                    .Unindent()
                    .AppendIndentedLine("],")
                    .Unindent()
                    .AppendIndentedLine("},");
            }

            builder
                .Unindent()
                .AppendIndentedLine("};")
                .AppendLine()
                .AppendIndentedLine("private async global::System.Threading.Tasks.Task<global::Krosmoz.Servers.GameServer.Commands.CommandResult> ExecuteCommandAsync(global::Krosmoz.Servers.GameServer.Commands.CommandContext context, global::Krosmoz.Servers.GameServer.Network.Transport.DofusConnection connection, global::System.IServiceProvider services, int index, string commandText, string commandGroupName, string commandName)");

            using (builder.CreateScope())
            {
                builder
                    .AppendIndentedLine("var currentIndex = index;")
                    .AppendLine()
                    .AppendIndentedLine("switch ((commandGroupName.ToLowerInvariant(), commandName.ToLowerInvariant()))")
                    .AppendIndentedLine('{');

                foreach (var commandGroup in commandGroups)
                {
                    var serviceName = commandGroup.TypeName.Split('.').Last().UnCapitalize();

                    foreach (var (y, command) in commandGroup.Commands.Index())
                    {
                        builder
                            .Indent()
                            .AppendIndentedLine("case (\"{0}\", \"{1}\"):", commandGroup.Name.ToLowerInvariant(), command.Name.ToLowerInvariant())
                            .Indent();

                        builder
                            .AppendIndentedLine("if (connection.Heroes.Account.Hierarchy < global::Krosmoz.Protocol.Enums.GameHierarchies.{0})", command.Hierarchy)
                            .Indent()
                            .AppendIndentedLine("return global::Krosmoz.Servers.GameServer.Commands.CommandResult.BadHierarchy(global::Krosmoz.Protocol.Enums.GameHierarchies.{0}, connection.Heroes.Account.Hierarchy);", command.Hierarchy)
                            .Unindent()
                            .AppendIndentedLine("if (_commandCooldowns.TryGetValue(\"{0}_{1}\", out var cooldown) && cooldown > global::System.DateTime.UtcNow)", commandGroup.Name, command.Name)
                            .Indent()
                            .AppendIndentedLine("return global::Krosmoz.Servers.GameServer.Commands.CommandResult.BadCooldown(global::System.DateTime.UtcNow - cooldown);")
                            .Unindent();

                        foreach (var (i, parameter) in command.Parameters.Index())
                        {
                            var parameterNameStr = $"{command.Name}_{parameter.Name}_str";
                            var parameterNameParsed = $"{command.Name}_{parameter.Name}_parsed";

                            builder
                                .AppendIndentedLine("var {0} = global::Krosmoz.Core.Extensions.StringExtensions.ExtractNextArgument(commandText, ref currentIndex, out var {0}_{1}) ? {0}_{1} : string.Empty;", parameterNameStr, i)
                                .AppendIndentedLine("context.Argument = {0};", parameterNameStr);

                            if (parameter.IsPrimitive || parameter.IsStruct)
                                builder.AppendIndentedLine("var {0} = ((global::Krosmoz.Servers.GameServer.Commands.Arguments.IArgumentConverter<{1}>)s_argumentConverters[\"{2}\"]).Convert(context);",
                                        parameterNameParsed,
                                        parameter.IsPrimitive ? parameter.TypeName.ToLowerInvariant() : parameter.TypeName.Replace("global::", string.Empty),
                                        parameter.TypeName.Replace("global::", string.Empty).ToLowerInvariant());
                            else if (parameter.TypeName.ToLowerInvariant() is "string")
                                builder
                                    .AppendIndentedLine("var {0} = ((global::Krosmoz.Servers.GameServer.Commands.Arguments.IArgumentConverter<string>)s_argumentConverters[\"string\"]).Convert(context);", parameterNameParsed)
                                    .AppendIndentedLine("currentIndex -= context.ArgumentLength;");
                            else if (parameter.IsEnum)
                                builder.AppendIndentedLine("var {0} = new global::Krosmoz.Servers.GameServer.Commands.Arguments.EnumArgumentConverter<{1}>().Convert(context);", parameterNameParsed, parameter.TypeName);
                            else
                                builder.AppendIndentedLine("var {0} = new global::Krosmoz.Servers.GameServer.Commands.Arguments.{1}ArgumentConverter().Convert(context);", parameterNameParsed, parameter.TypeName.Split('.').Last());
                        }

                        builder
                            .AppendIndentedLine("{0} = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<{1}>(services);", y is 0 ? $"var {serviceName}" : serviceName, commandGroup.TypeName)
                            .AppendIndentedLine("await {0}.{1}(connection{2});", serviceName, command.MethodName, command.Parameters.Length > 0 ? string.Concat(", ", string.Join(", ", command.Parameters.Select(x => $"{command.Name}_{x.Name}_parsed"))) : string.Empty);

                        if (command.Cooldown > TimeSpan.Zero)
                            builder.AppendIndentedLine("_commandCooldowns[\"{0}_{1}\"] = DateTime.UtcNow.AddTicks({2});", commandGroup.Name, command.Name, command.Cooldown.Ticks);

                        builder
                            .AppendIndentedLine("return global::Krosmoz.Servers.GameServer.Commands.CommandResult.Success();")
                            .AppendLine();
                        builder
                            .Unindent()
                            .Unindent();
                    }
                }

                builder
                    .Indent()
                    .AppendIndentedLine("default:")
                    .Indent()
                    .AppendIndentedLine("return global::Krosmoz.Servers.GameServer.Commands.CommandResult.CommandNotFound();")
                    .Unindent()
                    .Unindent()
                    .AppendIndentedLine('}');
            }
        }

        context.AddSource("CommandService.g.cs", builder.ToSourceText());
    }

    /// <summary>
    /// Generates a source file containing extension methods for registering command services
    /// in the dependency injection container.
    /// </summary>
    /// <param name="context">The context for source production.</param>
    /// <param name="commandGroups">The collection of command groups to generate code for.</param>
    private static void GenerateServiceCollectionExtensions(SourceProductionContext context, ImmutableArray<CommandGroup> commandGroups)
    {
        var builder = new IndentedStringBuilder()
            .AppendLine("// <auto-generated/>")
            .AppendLine()
            .AppendLine("namespace Krosmoz.Servers.GameServer.Commands;")
            .AppendLine()
            .AppendLine("[global::System.CodeDom.Compiler.GeneratedCode(\"Krosmoz.SourceGenerators.Commands\", \"1.0.0\")]")
            .AppendLine("internal static class ServiceCollectionExtensions");

        using (builder.CreateScope())
        {
            builder
                .AppendIndentedLine("public static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddCommands(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services)")
                .AppendIndentedLine('{')
                .Indent()
                .AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Krosmoz.Servers.GameServer.Services.Commands.ICommandService, global::Krosmoz.Servers.GameServer.Services.Commands.CommandService>(services);");

            foreach (var commandGroup in commandGroups)
                builder.AppendIndentedLine("global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddScoped<{0}>(services);", commandGroup.TypeName);

            builder
                .AppendIndentedLine("return services;")
                .Unindent()
                .AppendIndentedLine('}');
        }

        context.AddSource("ServiceCollectionExtensions.g.cs", builder.ToSourceText());
    }
}
